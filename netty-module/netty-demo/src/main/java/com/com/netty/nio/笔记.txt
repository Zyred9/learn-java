java,io中最为核心的一个概念是流( Stream),面向流的编程。Java中,一个流要么是输入流,要么是输出流,不可能同时既是输入流又是输出流.

java nio中拥有3个核心概念: Selector, Channel与 Buffer。在java,nio中,我们是面向块( block)或是缓冲区( buffer)编程的,
Buffer本身就是一块内存,底层实现上，他实际上是个数组。数据的读、写都是通过buffer来实现的。

除了数组之外, Buffer还提供了对于数据的结构化访问方式,并且可以追踪到系统的读写过程。

Java中的7种原生数据类型都有各自对应的ufer类型,如 stAuffer, ongBuffer,, ByteBufferkcharBuffert等等,
并没有 BooleanBuffer类型。

Channe1指的是可以向其写入数据或是从中读取数据的对象,它类似于java,io中的 Stream

所有数据的读写都是通过Buffer来进行的,永远不会出现直接向 Channe写入数据的情况,或是直接从 Channe1读取数据的情况。

与 Stream不同的是, Channe1是双向的,一个流只可能是 Inputstream或是 Outputstream, Channe.打开后则可以进行读取、写入或是读写。

由于Channe1是双向的,因此它能更好地反映出底层操作系统的真实情况;在inux系统中,底层操作系统的通道就是双向的。

关于 NIO Buffer中的3个重要状态属性的含义: position,1init与 capacity

0 < mark <s position <= limit <s capacity

通过No读取文件涉及到3个步骤

1.从FileInputstreamm获取到 Filechannel对象。

2.创建 Buffer

3.将数据从 Channel读取到 Buffer中。

绝对方法与相对方法的含义

1.相对方法:limit值与 position值会在操作时被考虑到

2.绝对方法:完全忽略掉limit值与 position值
